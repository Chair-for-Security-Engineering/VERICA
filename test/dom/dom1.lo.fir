circuit DOM : @[vlog/dom1.v:52.1-71.10]
  module AND2_X1 : @[lib/cells.v:19.1-23.10]
    input A1 : UInt<1> @[lib/cells.v:20.7-20.9]
    input A2 : UInt<1> @[lib/cells.v:20.11-20.13]
    output ZN : UInt<1> @[lib/cells.v:21.8-21.10]

    node _and_lib_cells_v_22_4 = and(A1, asUInt(A2)) @[lib/cells.v:22.14-22.21 lib/cells.v:22.14-22.21]
    ZN <= bits(_and_lib_cells_v_22_4, 0, 0) @[lib/cells.v:21.8-21.10]

  module DFF_X1 : @[lib/cells.v:49.1-56.10]
    input CK : UInt<1> @[lib/cells.v:50.7-50.9]
    input D : UInt<1> @[lib/cells.v:50.11-50.12]
    output Q : UInt<1> @[lib/cells.v:51.12-51.13]
    output QN : UInt<1> @[lib/cells.v:51.15-51.17]

    reg _procdff_14 : UInt<1>, asClock(CK) with :
      reset => (UInt<1>("h0"), _procdff_14) @[lib/cells.v:54.1-55.11]
    reg _procdff_15 : UInt<1>, asClock(CK) with :
      reset => (UInt<1>("h0"), _procdff_15) @[lib/cells.v:52.1-53.9]
    node _not_lib_cells_v_55_13 = not(pad(D, 1)) @[lib/cells.v:55.8-55.10 lib/cells.v:55.8-55.10]
    node _0_QN_0_0_ = bits(_not_lib_cells_v_55_13, 0, 0) @[lib/cells.v:54.1-55.11 lib/cells.v:54.1-55.11]
    Q <= bits(_procdff_15, 0, 0) @[lib/cells.v:51.12-51.13]
    QN <= bits(_procdff_14, 0, 0) @[lib/cells.v:51.15-51.17]
    _procdff_14 <= _0_QN_0_0_ @[lib/cells.v:54.1-55.11]
    _procdff_15 <= D @[lib/cells.v:52.1-53.9]

  module XOR2_X1 : @[lib/cells.v:37.1-41.10]
    input A : UInt<1> @[lib/cells.v:38.7-38.8]
    input B : UInt<1> @[lib/cells.v:38.10-38.11]
    output Z : UInt<1> @[lib/cells.v:39.8-39.9]

    node _xor_lib_cells_v_40_8 = xor(A, asUInt(B)) @[lib/cells.v:40.13-40.18 lib/cells.v:40.13-40.18]
    Z <= bits(_xor_lib_cells_v_40_8, 0, 0) @[lib/cells.v:39.8-39.9]

  module DOMcmp : @[vlog/dom1.v:41.1-49.10]
    output port_c : UInt<2> @[vlog/dom1.v:44.16-44.22]
    input port_v_0 : UInt<2> @[vlog/dom1.v:42.15-42.23]
    input port_v_1 : UInt<2> @[vlog/dom1.v:43.15-43.23]

    inst U1 of XOR2_X1 @[vlog/dom1.v:47.11-47.65]
    inst U2 of XOR2_X1 @[vlog/dom1.v:48.11-48.65]
    port_c <= cat(bits(U2.Z, 0, 0), bits(U1.Z, 0, 0)) @[vlog/dom1.v:44.16-44.22]
    U1.A <= bits(port_v_0, 0, 0) @[vlog/dom1.v:47.11-47.65]
    U1.B <= bits(port_v_0, 1, 1) @[vlog/dom1.v:47.11-47.65]
    U2.A <= bits(port_v_1, 0, 0) @[vlog/dom1.v:48.11-48.65]
    U2.B <= bits(port_v_1, 1, 1) @[vlog/dom1.v:48.11-48.65]

  module DOMmul : @[vlog/dom1.v:8.1-19.10]
    input port_a : UInt<2> @[vlog/dom1.v:9.15-9.21]
    input port_b : UInt<2> @[vlog/dom1.v:10.15-10.21]
    output port_u_0 : UInt<2> @[vlog/dom1.v:11.16-11.24]
    output port_u_1 : UInt<2> @[vlog/dom1.v:12.16-12.24]

    inst U1 of AND2_X1 @[vlog/dom1.v:15.11-15.66]
    inst U2 of AND2_X1 @[vlog/dom1.v:16.11-16.66]
    inst U3 of AND2_X1 @[vlog/dom1.v:17.11-17.66]
    inst U4 of AND2_X1 @[vlog/dom1.v:18.11-18.66]
    port_u_0 <= cat(bits(U4.ZN, 0, 0), bits(U3.ZN, 0, 0)) @[vlog/dom1.v:11.16-11.24]
    port_u_1 <= cat(bits(U1.ZN, 0, 0), bits(U2.ZN, 0, 0)) @[vlog/dom1.v:12.16-12.24]
    U1.A1 <= bits(port_b, 1, 1) @[vlog/dom1.v:15.11-15.66]
    U1.A2 <= bits(port_a, 1, 1) @[vlog/dom1.v:15.11-15.66]
    U2.A1 <= bits(port_a, 1, 1) @[vlog/dom1.v:16.11-16.66]
    U2.A2 <= bits(port_b, 0, 0) @[vlog/dom1.v:16.11-16.66]
    U3.A1 <= bits(port_a, 0, 0) @[vlog/dom1.v:17.11-17.66]
    U3.A2 <= bits(port_b, 0, 0) @[vlog/dom1.v:17.11-17.66]
    U4.A1 <= bits(port_b, 1, 1) @[vlog/dom1.v:18.11-18.66]
    U4.A2 <= bits(port_a, 0, 0) @[vlog/dom1.v:18.11-18.66]

  module DOMref : @[vlog/dom1.v:22.1-38.10]
    input clk : UInt<1> @[vlog/dom1.v:28.9-28.12]
    input port_r : UInt<1> @[vlog/dom1.v:27.15-27.21]
    input port_u_0 : UInt<2> @[vlog/dom1.v:23.15-23.23]
    input port_u_1 : UInt<2> @[vlog/dom1.v:24.15-24.23]
    output port_v_0 : UInt<2> @[vlog/dom1.v:25.16-25.24]
    output port_v_1 : UInt<2> @[vlog/dom1.v:26.16-26.24]
    input reset : UInt<8> @[vlog/dom1.v:29.15-29.20]

    inst U3 of XOR2_X1 @[vlog/dom1.v:36.11-36.56]
    inst U4 of XOR2_X1 @[vlog/dom1.v:37.11-37.56]
    inst ff_0_reg_0_ of DFF_X1 @[vlog/dom1.v:35.10-35.75]
    inst ff_0_reg_1_ of DFF_X1 @[vlog/dom1.v:34.10-34.66]
    inst ff_1_reg_0_ of DFF_X1 @[vlog/dom1.v:33.10-33.66]
    inst ff_1_reg_1_ of DFF_X1 @[vlog/dom1.v:32.10-32.75]
    node N0 = U3.Z @[vlog/dom1.v:30.10-30.12 vlog/dom1.v:36.11-36.56]
    node N1 = U4.Z @[vlog/dom1.v:30.14-30.16 vlog/dom1.v:37.11-37.56]
    port_v_0 <= cat(bits(ff_0_reg_1_.Q, 0, 0), bits(ff_0_reg_0_.Q, 0, 0)) @[vlog/dom1.v:25.16-25.24]
    port_v_1 <= cat(bits(ff_1_reg_1_.Q, 0, 0), bits(ff_1_reg_0_.Q, 0, 0)) @[vlog/dom1.v:26.16-26.24]
    U3.A <= port_r @[vlog/dom1.v:36.11-36.56]
    U3.B <= bits(port_u_0, 1, 1) @[vlog/dom1.v:36.11-36.56]
    U4.A <= port_r @[vlog/dom1.v:37.11-37.56]
    U4.B <= bits(port_u_1, 0, 0) @[vlog/dom1.v:37.11-37.56]
    ff_0_reg_0_.CK <= clk @[vlog/dom1.v:35.10-35.75]
    ff_0_reg_0_.D <= bits(port_u_0, 0, 0) @[vlog/dom1.v:35.10-35.75]
    ff_0_reg_1_.CK <= clk @[vlog/dom1.v:34.10-34.66]
    ff_0_reg_1_.D <= N0 @[vlog/dom1.v:34.10-34.66]
    ff_1_reg_0_.CK <= clk @[vlog/dom1.v:33.10-33.66]
    ff_1_reg_0_.D <= N1 @[vlog/dom1.v:33.10-33.66]
    ff_1_reg_1_.CK <= clk @[vlog/dom1.v:32.10-32.75]
    ff_1_reg_1_.D <= bits(port_u_1, 1, 1) @[vlog/dom1.v:32.10-32.75]

  module DOM : @[vlog/dom1.v:52.1-71.10]
    input clk : UInt<1> @[vlog/dom1.v:57.9-57.12]
    input port_a : UInt<2> @[vlog/dom1.v:53.15-53.21]
    input port_b : UInt<2> @[vlog/dom1.v:54.15-54.21]
    output port_c : UInt<2> @[vlog/dom1.v:55.16-55.22]
    input port_r : UInt<1> @[vlog/dom1.v:56.15-56.21]
    input reset : UInt<1> @[vlog/dom1.v:57.14-57.19]

    inst cmp of DOMcmp @[vlog/dom1.v:69.10-70.18]
    inst mul_ of DOMmul @[vlog/dom1.v:64.10-65.34]
    inst ref_1_ of DOMref @[vlog/dom1.v:66.10-68.29]
    node mul_port_u_0 = mul_.port_u_0 @[vlog/dom1.v:59.16-59.28 vlog/dom1.v:64.10-65.34]
    node mul_port_u_1 = mul_.port_u_1 @[vlog/dom1.v:60.16-60.28 vlog/dom1.v:64.10-65.34]
    node ref_1_port_v_0 = ref_1_.port_v_0 @[vlog/dom1.v:61.16-61.30 vlog/dom1.v:66.10-68.29]
    node ref_1_port_v_1 = ref_1_.port_v_1 @[vlog/dom1.v:62.16-62.30 vlog/dom1.v:66.10-68.29]
    port_c <= cmp.port_c @[vlog/dom1.v:69.10-70.18]
    cmp.port_v_0 <= ref_1_port_v_0 @[vlog/dom1.v:69.10-70.18]
    cmp.port_v_1 <= ref_1_port_v_1 @[vlog/dom1.v:69.10-70.18]
    mul_.port_a <= port_a @[vlog/dom1.v:64.10-65.34]
    mul_.port_b <= port_b @[vlog/dom1.v:64.10-65.34]
    ref_1_.clk <= clk @[vlog/dom1.v:66.10-68.29]
    ref_1_.port_r <= port_r @[vlog/dom1.v:66.10-68.29]
    ref_1_.port_u_0 <= mul_port_u_0 @[vlog/dom1.v:66.10-68.29]
    ref_1_.port_u_1 <= mul_port_u_1 @[vlog/dom1.v:66.10-68.29]
    ref_1_.reset <= UInt<8>("h0") @[vlog/dom1.v:66.10-68.29]

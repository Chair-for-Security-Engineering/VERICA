circuit DOM : @[vlog/dom2.v:74.1-95.10]
  module AND2_X1 : @[lib/cells.v:19.1-23.10]
    input A1 : UInt<1> @[lib/cells.v:20.7-20.9]
    input A2 : UInt<1> @[lib/cells.v:20.11-20.13]
    output ZN : UInt<1> @[lib/cells.v:21.8-21.10]

    node _and_lib_cells_v_22_4 = and(A1, asUInt(A2)) @[lib/cells.v:22.14-22.21 lib/cells.v:22.14-22.21]
    ZN <= bits(_and_lib_cells_v_22_4, 0, 0) @[lib/cells.v:21.8-21.10]

  module DFF_X1 : @[lib/cells.v:49.1-56.10]
    input CK : UInt<1> @[lib/cells.v:50.7-50.9]
    input D : UInt<1> @[lib/cells.v:50.11-50.12]
    output Q : UInt<1> @[lib/cells.v:51.12-51.13]
    output QN : UInt<1> @[lib/cells.v:51.15-51.17]

    reg _procdff_14 : UInt<1>, asClock(CK) with :
      reset => (UInt<1>("h0"), _procdff_14) @[lib/cells.v:54.1-55.11]
    reg _procdff_15 : UInt<1>, asClock(CK) with :
      reset => (UInt<1>("h0"), _procdff_15) @[lib/cells.v:52.1-53.9]
    node _not_lib_cells_v_55_13 = not(pad(D, 1)) @[lib/cells.v:55.8-55.10 lib/cells.v:55.8-55.10]
    node _0_QN_0_0_ = bits(_not_lib_cells_v_55_13, 0, 0) @[lib/cells.v:54.1-55.11 lib/cells.v:54.1-55.11]
    Q <= bits(_procdff_15, 0, 0) @[lib/cells.v:51.12-51.13]
    QN <= bits(_procdff_14, 0, 0) @[lib/cells.v:51.15-51.17]
    _procdff_14 <= _0_QN_0_0_ @[lib/cells.v:54.1-55.11]
    _procdff_15 <= D @[lib/cells.v:52.1-53.9]

  module XNOR2_X1 : @[lib/cells.v:43.1-47.10]
    input A : UInt<1> @[lib/cells.v:44.7-44.8]
    input B : UInt<1> @[lib/cells.v:44.10-44.11]
    output ZN : UInt<1> @[lib/cells.v:45.8-45.10]

    node _xor_lib_cells_v_46_9 = xor(A, asUInt(B)) @[lib/cells.v:46.15-46.20 lib/cells.v:46.15-46.20]
    node _xor_lib_cells_v_46_9_Y = bits(_xor_lib_cells_v_46_9, 0, 0) @[lib/cells.v:46.15-46.20 lib/cells.v:46.15-46.20]
    node _not_lib_cells_v_46_10 = not(pad(_xor_lib_cells_v_46_9_Y, 1)) @[lib/cells.v:46.13-46.21 lib/cells.v:46.13-46.21]
    ZN <= bits(_not_lib_cells_v_46_10, 0, 0) @[lib/cells.v:45.8-45.10]

  module XOR2_X1 : @[lib/cells.v:37.1-41.10]
    input A : UInt<1> @[lib/cells.v:38.7-38.8]
    input B : UInt<1> @[lib/cells.v:38.10-38.11]
    output Z : UInt<1> @[lib/cells.v:39.8-39.9]

    node _xor_lib_cells_v_40_8 = xor(A, asUInt(B)) @[lib/cells.v:40.13-40.18 lib/cells.v:40.13-40.18]
    Z <= bits(_xor_lib_cells_v_40_8, 0, 0) @[lib/cells.v:39.8-39.9]

  module DOMcmp : @[vlog/dom2.v:58.1-71.10]
    output port_c : UInt<3> @[vlog/dom2.v:62.16-62.22]
    input port_v_0 : UInt<3> @[vlog/dom2.v:59.15-59.23]
    input port_v_1 : UInt<3> @[vlog/dom2.v:60.15-60.23]
    input port_v_2 : UInt<3> @[vlog/dom2.v:61.15-61.23]

    inst U1 of XNOR2_X1 @[vlog/dom2.v:65.12-65.60]
    inst U2 of XNOR2_X1 @[vlog/dom2.v:66.12-66.58]
    inst U3 of XNOR2_X1 @[vlog/dom2.v:67.12-67.60]
    inst U4 of XNOR2_X1 @[vlog/dom2.v:68.12-68.58]
    inst U5 of XNOR2_X1 @[vlog/dom2.v:69.12-69.60]
    inst U6 of XNOR2_X1 @[vlog/dom2.v:70.12-70.58]
    node n1 = U1.ZN @[vlog/dom2.v:63.10-63.12 vlog/dom2.v:65.12-65.60]
    node n2 = U3.ZN @[vlog/dom2.v:63.14-63.16 vlog/dom2.v:67.12-67.60]
    node n3 = U5.ZN @[vlog/dom2.v:63.18-63.20 vlog/dom2.v:69.12-69.60]
    port_c <= cat(bits(U6.ZN, 0, 0), cat(bits(U4.ZN, 0, 0), bits(U2.ZN, 0, 0))) @[vlog/dom2.v:62.16-62.22]
    U1.A <= bits(port_v_0, 2, 2) @[vlog/dom2.v:65.12-65.60]
    U1.B <= bits(port_v_0, 0, 0) @[vlog/dom2.v:65.12-65.60]
    U2.A <= n1 @[vlog/dom2.v:66.12-66.58]
    U2.B <= bits(port_v_0, 1, 1) @[vlog/dom2.v:66.12-66.58]
    U3.A <= bits(port_v_1, 2, 2) @[vlog/dom2.v:67.12-67.60]
    U3.B <= bits(port_v_1, 0, 0) @[vlog/dom2.v:67.12-67.60]
    U4.A <= n2 @[vlog/dom2.v:68.12-68.58]
    U4.B <= bits(port_v_1, 1, 1) @[vlog/dom2.v:68.12-68.58]
    U5.A <= bits(port_v_2, 2, 2) @[vlog/dom2.v:69.12-69.60]
    U5.B <= bits(port_v_2, 0, 0) @[vlog/dom2.v:69.12-69.60]
    U6.A <= n3 @[vlog/dom2.v:70.12-70.58]
    U6.B <= bits(port_v_2, 1, 1) @[vlog/dom2.v:70.12-70.58]

  module DOMmul : @[vlog/dom2.v:8.1-25.10]
    input port_a : UInt<3> @[vlog/dom2.v:9.15-9.21]
    input port_b : UInt<3> @[vlog/dom2.v:10.15-10.21]
    output port_u_0 : UInt<3> @[vlog/dom2.v:11.16-11.24]
    output port_u_1 : UInt<3> @[vlog/dom2.v:12.16-12.24]
    output port_u_2 : UInt<3> @[vlog/dom2.v:13.16-13.24]

    inst U1 of AND2_X1 @[vlog/dom2.v:16.11-16.66]
    inst U2 of AND2_X1 @[vlog/dom2.v:17.11-17.66]
    inst U3 of AND2_X1 @[vlog/dom2.v:18.11-18.66]
    inst U4 of AND2_X1 @[vlog/dom2.v:19.11-19.66]
    inst U5 of AND2_X1 @[vlog/dom2.v:20.11-20.66]
    inst U6 of AND2_X1 @[vlog/dom2.v:21.11-21.66]
    inst U7 of AND2_X1 @[vlog/dom2.v:22.11-22.66]
    inst U8 of AND2_X1 @[vlog/dom2.v:23.11-23.66]
    inst U9 of AND2_X1 @[vlog/dom2.v:24.11-24.66]
    port_u_0 <= cat(bits(U4.ZN, 0, 0), cat(bits(U5.ZN, 0, 0), bits(U7.ZN, 0, 0))) @[vlog/dom2.v:11.16-11.24]
    port_u_1 <= cat(bits(U8.ZN, 0, 0), cat(bits(U9.ZN, 0, 0), bits(U6.ZN, 0, 0))) @[vlog/dom2.v:12.16-12.24]
    port_u_2 <= cat(bits(U1.ZN, 0, 0), cat(bits(U2.ZN, 0, 0), bits(U3.ZN, 0, 0))) @[vlog/dom2.v:13.16-13.24]
    U1.A1 <= bits(port_b, 2, 2) @[vlog/dom2.v:16.11-16.66]
    U1.A2 <= bits(port_a, 2, 2) @[vlog/dom2.v:16.11-16.66]
    U2.A1 <= bits(port_b, 1, 1) @[vlog/dom2.v:17.11-17.66]
    U2.A2 <= bits(port_a, 2, 2) @[vlog/dom2.v:17.11-17.66]
    U3.A1 <= bits(port_b, 0, 0) @[vlog/dom2.v:18.11-18.66]
    U3.A2 <= bits(port_a, 2, 2) @[vlog/dom2.v:18.11-18.66]
    U4.A1 <= bits(port_b, 2, 2) @[vlog/dom2.v:19.11-19.66]
    U4.A2 <= bits(port_a, 0, 0) @[vlog/dom2.v:19.11-19.66]
    U5.A1 <= bits(port_a, 0, 0) @[vlog/dom2.v:20.11-20.66]
    U5.A2 <= bits(port_b, 1, 1) @[vlog/dom2.v:20.11-20.66]
    U6.A1 <= bits(port_b, 0, 0) @[vlog/dom2.v:21.11-21.66]
    U6.A2 <= bits(port_a, 1, 1) @[vlog/dom2.v:21.11-21.66]
    U7.A1 <= bits(port_b, 0, 0) @[vlog/dom2.v:22.11-22.66]
    U7.A2 <= bits(port_a, 0, 0) @[vlog/dom2.v:22.11-22.66]
    U8.A1 <= bits(port_a, 1, 1) @[vlog/dom2.v:23.11-23.66]
    U8.A2 <= bits(port_b, 2, 2) @[vlog/dom2.v:23.11-23.66]
    U9.A1 <= bits(port_a, 1, 1) @[vlog/dom2.v:24.11-24.66]
    U9.A2 <= bits(port_b, 1, 1) @[vlog/dom2.v:24.11-24.66]

  module DOMref : @[vlog/dom2.v:28.1-55.10]
    input clk : UInt<1> @[vlog/dom2.v:37.9-37.12]
    input port_r : UInt<3> @[vlog/dom2.v:36.15-36.21]
    input port_u_0 : UInt<3> @[vlog/dom2.v:30.15-30.23]
    input port_u_1 : UInt<3> @[vlog/dom2.v:31.15-31.23]
    input port_u_2 : UInt<3> @[vlog/dom2.v:32.15-32.23]
    output port_v_0 : UInt<3> @[vlog/dom2.v:33.16-33.24]
    output port_v_1 : UInt<3> @[vlog/dom2.v:34.16-34.24]
    output port_v_2 : UInt<3> @[vlog/dom2.v:35.16-35.24]
    input reset : UInt<1> @[vlog/dom2.v:37.14-37.19]

    inst U3 of XOR2_X1 @[vlog/dom2.v:49.11-49.56]
    inst U4 of XOR2_X1 @[vlog/dom2.v:50.11-50.56]
    inst U5 of XOR2_X1 @[vlog/dom2.v:51.11-51.56]
    inst U6 of XOR2_X1 @[vlog/dom2.v:52.11-52.56]
    inst U7 of XOR2_X1 @[vlog/dom2.v:53.11-53.56]
    inst U8 of XOR2_X1 @[vlog/dom2.v:54.11-54.56]
    inst ff_0_reg_0_ of DFF_X1 @[vlog/dom2.v:45.10-45.75]
    inst ff_0_reg_1_ of DFF_X1 @[vlog/dom2.v:44.10-44.66]
    inst ff_0_reg_2_ of DFF_X1 @[vlog/dom2.v:43.10-43.66]
    inst ff_1_reg_0_ of DFF_X1 @[vlog/dom2.v:48.10-48.66]
    inst ff_1_reg_1_ of DFF_X1 @[vlog/dom2.v:47.10-47.75]
    inst ff_1_reg_2_ of DFF_X1 @[vlog/dom2.v:46.10-46.66]
    inst ff_2_reg_0_ of DFF_X1 @[vlog/dom2.v:42.10-42.66]
    inst ff_2_reg_1_ of DFF_X1 @[vlog/dom2.v:41.10-41.66]
    inst ff_2_reg_2_ of DFF_X1 @[vlog/dom2.v:40.10-40.75]
    node N0 = U5.Z @[vlog/dom2.v:38.10-38.12 vlog/dom2.v:51.11-51.56]
    node N1 = U6.Z @[vlog/dom2.v:38.14-38.16 vlog/dom2.v:52.11-52.56]
    node N2 = U3.Z @[vlog/dom2.v:38.18-38.20 vlog/dom2.v:49.11-49.56]
    node N3 = U4.Z @[vlog/dom2.v:38.22-38.24 vlog/dom2.v:50.11-50.56]
    node N4 = U7.Z @[vlog/dom2.v:38.26-38.28 vlog/dom2.v:53.11-53.56]
    node N5 = U8.Z @[vlog/dom2.v:38.30-38.32 vlog/dom2.v:54.11-54.56]
    port_v_0 <= cat(bits(ff_0_reg_2_.Q, 0, 0), cat(bits(ff_0_reg_1_.Q, 0, 0), bits(ff_0_reg_0_.Q, 0, 0))) @[vlog/dom2.v:33.16-33.24]
    port_v_1 <= cat(bits(ff_1_reg_2_.Q, 0, 0), cat(bits(ff_1_reg_1_.Q, 0, 0), bits(ff_1_reg_0_.Q, 0, 0))) @[vlog/dom2.v:34.16-34.24]
    port_v_2 <= cat(bits(ff_2_reg_2_.Q, 0, 0), cat(bits(ff_2_reg_1_.Q, 0, 0), bits(ff_2_reg_0_.Q, 0, 0))) @[vlog/dom2.v:35.16-35.24]
    U3.A <= bits(port_r, 0, 0) @[vlog/dom2.v:49.11-49.56]
    U3.B <= bits(port_u_1, 0, 0) @[vlog/dom2.v:49.11-49.56]
    U4.A <= bits(port_r, 2, 2) @[vlog/dom2.v:50.11-50.56]
    U4.B <= bits(port_u_1, 2, 2) @[vlog/dom2.v:50.11-50.56]
    U5.A <= bits(port_r, 0, 0) @[vlog/dom2.v:51.11-51.56]
    U5.B <= bits(port_u_0, 1, 1) @[vlog/dom2.v:51.11-51.56]
    U6.A <= bits(port_r, 1, 1) @[vlog/dom2.v:52.11-52.56]
    U6.B <= bits(port_u_0, 2, 2) @[vlog/dom2.v:52.11-52.56]
    U7.A <= bits(port_r, 1, 1) @[vlog/dom2.v:53.11-53.56]
    U7.B <= bits(port_u_2, 0, 0) @[vlog/dom2.v:53.11-53.56]
    U8.A <= bits(port_r, 2, 2) @[vlog/dom2.v:54.11-54.56]
    U8.B <= bits(port_u_2, 1, 1) @[vlog/dom2.v:54.11-54.56]
    ff_0_reg_0_.CK <= clk @[vlog/dom2.v:45.10-45.75]
    ff_0_reg_0_.D <= bits(port_u_0, 0, 0) @[vlog/dom2.v:45.10-45.75]
    ff_0_reg_1_.CK <= clk @[vlog/dom2.v:44.10-44.66]
    ff_0_reg_1_.D <= N0 @[vlog/dom2.v:44.10-44.66]
    ff_0_reg_2_.CK <= clk @[vlog/dom2.v:43.10-43.66]
    ff_0_reg_2_.D <= N1 @[vlog/dom2.v:43.10-43.66]
    ff_1_reg_0_.CK <= clk @[vlog/dom2.v:48.10-48.66]
    ff_1_reg_0_.D <= N2 @[vlog/dom2.v:48.10-48.66]
    ff_1_reg_1_.CK <= clk @[vlog/dom2.v:47.10-47.75]
    ff_1_reg_1_.D <= bits(port_u_1, 1, 1) @[vlog/dom2.v:47.10-47.75]
    ff_1_reg_2_.CK <= clk @[vlog/dom2.v:46.10-46.66]
    ff_1_reg_2_.D <= N3 @[vlog/dom2.v:46.10-46.66]
    ff_2_reg_0_.CK <= clk @[vlog/dom2.v:42.10-42.66]
    ff_2_reg_0_.D <= N4 @[vlog/dom2.v:42.10-42.66]
    ff_2_reg_1_.CK <= clk @[vlog/dom2.v:41.10-41.66]
    ff_2_reg_1_.D <= N5 @[vlog/dom2.v:41.10-41.66]
    ff_2_reg_2_.CK <= clk @[vlog/dom2.v:40.10-40.75]
    ff_2_reg_2_.D <= bits(port_u_2, 2, 2) @[vlog/dom2.v:40.10-40.75]

  module DOM : @[vlog/dom2.v:74.1-95.10]
    input clk : UInt<1> @[vlog/dom2.v:79.9-79.12]
    input port_a : UInt<3> @[vlog/dom2.v:75.15-75.21]
    input port_b : UInt<3> @[vlog/dom2.v:76.15-76.21]
    output port_c : UInt<3> @[vlog/dom2.v:77.16-77.22]
    input port_r : UInt<3> @[vlog/dom2.v:78.15-78.21]
    input reset : UInt<1> @[vlog/dom2.v:79.14-79.19]

    inst cmp of DOMcmp @[vlog/dom2.v:93.10-94.53]
    inst mul_ of DOMmul @[vlog/dom2.v:88.10-89.59]
    inst ref_1_ of DOMref @[vlog/dom2.v:90.10-92.78]
    node mul_port_u_0 = mul_.port_u_0 @[vlog/dom2.v:81.16-81.28 vlog/dom2.v:88.10-89.59]
    node mul_port_u_1 = mul_.port_u_1 @[vlog/dom2.v:82.16-82.28 vlog/dom2.v:88.10-89.59]
    node mul_port_u_2 = mul_.port_u_2 @[vlog/dom2.v:83.16-83.28 vlog/dom2.v:88.10-89.59]
    node ref_1_port_v_0 = ref_1_.port_v_0 @[vlog/dom2.v:84.16-84.30 vlog/dom2.v:90.10-92.78]
    node ref_1_port_v_1 = ref_1_.port_v_1 @[vlog/dom2.v:85.16-85.30 vlog/dom2.v:90.10-92.78]
    node ref_1_port_v_2 = ref_1_.port_v_2 @[vlog/dom2.v:86.16-86.30 vlog/dom2.v:90.10-92.78]
    port_c <= cmp.port_c @[vlog/dom2.v:93.10-94.53]
    cmp.port_v_0 <= ref_1_port_v_0 @[vlog/dom2.v:93.10-94.53]
    cmp.port_v_1 <= ref_1_port_v_1 @[vlog/dom2.v:93.10-94.53]
    cmp.port_v_2 <= ref_1_port_v_2 @[vlog/dom2.v:93.10-94.53]
    mul_.port_a <= port_a @[vlog/dom2.v:88.10-89.59]
    mul_.port_b <= port_b @[vlog/dom2.v:88.10-89.59]
    ref_1_.clk <= clk @[vlog/dom2.v:90.10-92.78]
    ref_1_.port_r <= port_r @[vlog/dom2.v:90.10-92.78]
    ref_1_.port_u_0 <= mul_port_u_0 @[vlog/dom2.v:90.10-92.78]
    ref_1_.port_u_1 <= mul_port_u_1 @[vlog/dom2.v:90.10-92.78]
    ref_1_.port_u_2 <= mul_port_u_2 @[vlog/dom2.v:90.10-92.78]
    ref_1_.reset <= UInt<1>("h0") @[vlog/dom2.v:90.10-92.78]

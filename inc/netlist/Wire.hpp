/*
 * -----------------------------------------------------------------
 * COMPANY : Ruhr-Universit√§t Bochum, Chair for Security Engineering
 * AUTHOR  : Pascal Sasdrich (pascal.sasdrich@rub.de)
 * DOCUMENT: 
 * -----------------------------------------------------------------
 *
 * Copyright (c) 2021, Pascal Sasdrich
 *
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTERS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Please see LICENSE and README for license and further instructions.
 */

#ifndef __VERICA_WIRE_HPP__
#define __VERICA_WIRE_HPP__

#include <string>
#include <vector>

#include "netlist/Pin.hpp"
#include "util.hpp"

/* Forward declaration */
namespace verica
{
    class Module;

    class Wire
    {
        public:
        
            /*
             * ###########################################################################
             * # ACCESSOR FUNCTIONS                                                      #
             * ###########################################################################
             */

            /** 
             * Each wire is associated with a (unique) identifier, generated by the corresponding netlist object.
             *
             * @brief Accessor function for wire UID.
             *
             * @returns The UID of the wire.
             */
            const int& uid() const { return m_uid; }

            /** 
             * Each wire is associated with a (non-unique) name, provided during construction.
             *
             * @brief Accessor function for wire name.
             *
             * @returns The name of the wire.
             */
            const std::string& name() const { return m_name; }

            /** 
             * Each input-wire is associated with a primary input identifier. This is required for redundant-based designs.
             *
             * @brief Accessor function for primary input identifier.
             *
             * @returns Primary input identifier.
             */
            const int& primary_input_identifier() const { return m_primary_input_identifier; }

            /** 
             * Each wire is associate with a single module object of the gate-level netlist.
             * 
             * @brief Accessor function for the parent module.
             *
             * @returns Pointer to the parent module.
             */
            const Module* parent() const { return m_parent; }

            /** 
             * Each wire is associated with an index, providing the precise position within the
             * *logical* depth of the netlist.
             * 
             * @brief Accessor function for the logical depth index.
             *
             * @returns The logical depth index.
             */
            const int& depth_index() const { return m_depth_index; }
            
            /** 
             * Each wire is associated with an index, providing the precise position within the
             * *sequential* depth of the netlist.
             * 
             * @brief Accessor function for the sequential depth index.
             *
             * @returns The sequential depth index.
             */
            const int& stage_index() const { return m_stage_index; }

            /* Accessor function(s) */
            const bool& ignore() const { return m_ignore; }
            const Pin* source_pin() const { return m_source_pin; }
            const std::vector<const Pin*> target_pins() const { return m_target_pins; }
            const std::vector<const Wire*> propagation_path() const { return m_propagation_path; }
            const int& faulty_gate_identifier(int core) const { return m_faulty_gate_identifier[core]; }

            /** 
             * Golden function of the subcircuit spanning from the wire to the inputs of the current
             * module under test (generated during elaboration). Used during fault injection tracking
             * the unmodified circuit behavior.
             * 
             * @brief Accessor function for the golden BDD of the wire.
             *
             * @param thread_num Integer, representing the current thread number.

             * @returns Golden function (BDD) of the wire for given thread number.
             */
            const BDD& golden_functions(int thread_num) const { return m_golden_functions[thread_num]; }

            /** 
             * Faulty function of the subcircuit spanning from the wire to the inputs of the current
             * module under test (generated during fault injection). Used during fault injection tracking
             * the modified circuit behavior.
             * 
             * @brief Accessor function for the faulty BDD of the wire.
             *
             * @param thread_num Integer, representing the current thread number.

             * @returns Faulty function (BDD) of the wire for given thread number.
             */
            const BDD& faulty_functions(int thread_num) const { return m_faulty_functions[thread_num]; }

            /** 
             * Function of the subcircuit spanning from the wire to the inputs of the current
             * module under test (generated during elaboration and modified during fault injection). 
             * 
             * @brief Accessor function for the current function (BDD) of the wire.
             *
             * @param thread_num Integer, representing the current thread number.

             * @returns Current function (BDD) of the wire for given thread number.
             */
            const BDD& functions(int thread_num) const;
    
            /** 
             * BDDs provide a fast way to track sets of variables. This function provides access to the BDD
             * tracking the contributing input variables of the wire.
             * 
             * @brief Accessor function for the input variables (BDD) contributing to the function of the wire.
             *
             * @param thread_num Integer, representing the current thread number.

             * @returns BDD of input variables contributing to the function of the wire.
             */            
            const std::set<const Wire*>& variables(int thread_num) const { return m_variables[thread_num]; }
            
            /** 
             * BDDs provide a fast way to track sets of variables. This function provides access to the BDD
             * tracking the contributing sequential modules (registers) of the wire.
             * 
             * @brief Accessor function for the sequential modules (registers) contributing of the wire.
             *
             * @param thread_num Integer, representing the current thread number.

             * @returns BDD of the sequential modules (registers) of the wire.
             */   
            const std::set<const Wire*>& registers(int thread_num) const { return m_registers[thread_num]; }

            const BDD& secrets(int thread_num) const { return m_secrets[thread_num]; }

        private:
            friend class Netlist;

            /* Constructor(s) */
            Wire(std::string name);                             /**< Private constructor, only accessible from netlist object */

            /* Disable copy-constructor / copy-assignment */
            Wire(const Wire&) = delete;
            Wire& operator=(const Wire&) = delete;

            /** Properties */
            int m_uid;                                          /**< Unique wire identifier (Properties) */
            std::string m_name;                                 /**< Non-unique wire name (Properties) */
            int m_primary_input_identifier = -1 ;               /**< Identifier for primary inputs (Properties) */

            /* Hierarchy */
            Module* m_parent;                                   /**< Pointer to the parent module of the wire (Hierarchy) */
            int m_depth_index = -1;                             /**< Position within logical depth of the netlist (Hierarchy) */
            int m_stage_index = -1;                             /**< Position within sequential depth of the netlist (Hierarchy) */

            /* Connectivity */
            Pin* m_source_pin;
            std::vector<const Pin*> m_target_pins;
            std::vector<const Wire*> m_propagation_path;

            /* Gate information */
            bool m_ignore = false;
            std::vector<int> m_faulty_gate_identifier;

            /* BDDs */
            std::vector<BDD> m_golden_functions;                /**<  */
            std::vector<BDD> m_faulty_functions;                /**<  */    
            std::vector<std::set<const Wire*>> m_variables;     /**<  */
            std::vector<std::set<const Wire*>> m_registers;     /**<  */
            std::vector<BDD> m_secrets;                         /**<  */

            void remove_target_pin(int uid);
    };
}

#endif // __VERICA_WIRE_HPP__

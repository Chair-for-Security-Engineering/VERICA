/*
 * -----------------------------------------------------------------
 * COMPANY : Ruhr-Universit√§t Bochum, Chair for Security Engineering
 * AUTHOR  : Jakob Feldtkeller (jakob.feldtkeller@rub.de)
 *           Jan Richter-Brockmann (jan.richter-brockmann@rub.de)
 *           Pascal Sasdrich (pascal.sasdrich@rub.de)
 * DOCUMENT: --
 * -----------------------------------------------------------------
 *
 * Copyright (c) 2021, Pascal Sasdrich and Jan Richter-Brockmann and Jakob Feldtkeller
 *
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTERS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Please see license.rtf and README for license and further instructions.
 */

#ifndef __VERICA_ANALYZER_CONFIGURATION_FAULT_VULNERABILITY_HPP_
#define __VERICA_ANALYZER_CONFIGURATION_FAULT_VULNERABILITY_HPP_

#include "Configuration.hpp"
#include "injector/Injector.hpp"

class ConfigurationFaultVulnerability : public Configuration
{
    public:

        ConfigurationFaultVulnerability(std::string name, std::vector<Injector*> injector, Logger *logger) : 
                Configuration(name), m_injector{injector}, m_logger{logger} { };

        /* Initialize strategy */
        void initialize(const Settings *settings, State *state) override;
    
        /* Perform analysis for given context & configuration */
        void execute(const Settings *settings, State *state) override;

        /* Finalize analysis for given context & configuration */
        void finalize(const Settings *settings, State *state);

        /* Report analysis results for given context & configuration */
        void report(std::string service, const Logger *logger, const Settings *settings, State *state) const override;
    
    private:
        std::vector<std::map<const verica::Wire*, std::vector<BDD>>> m_fault_selection;
        std::vector<int> m_bdd_input_is_secret;
        std::vector<int> m_bdd_ouput_index;
        std::vector<bool> m_bdd_input_is_random;
        std::vector<Injector*> m_injector;
        Logger *m_logger;
        double m_fia_vulnerability;
        double m_fia_min_entropy;
        double m_fia_leakage;
        double m_fia_vulnerability_ci_low;
        double m_fia_vulnerability_ci_high;
        double m_fia_min_entropy_ci_low;
        double m_fia_min_entropy_ci_high;
        double m_fia_leakage_ci_low;
        double m_fia_leakage_ci_high;
};

#endif // __VERICA_ANALYZER_CONFIGURATION_FAULT_VULNERABILITY_HPP_